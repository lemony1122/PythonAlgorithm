
# 문제
# 정수 삼각형
# 삼각형 모양으로 배치된 정수들이 있습니다. 맨 위층부터 시작하여 아래층으로 내려올 때,
# 선택된 수의 합이 최대가 되는 경로를 찾아야 합니다.
#
# 이동 규칙은 다음과 같습니다:
# 현재 위치에서 대각선 왼쪽 또는 오른쪽으로만 이동할 수 있습니다.
# 한 층씩 아래로 내려가면서 수를 선택해야 합니다.
# 선택한 수들의 합이 최대가 되는 경로를 찾아야 합니다.
#
# 입력 형식
# 첫째 줄에 삼각형의 크기 n이 주어집니다. (1 ≤ n ≤ 500)
# 둘째 줄부터 n+1번째 줄까지 정수 삼각형이 주어집니다.
# 각 정수는 0 이상 9999 이하입니다.
# i번째 줄에는 i개의 정수가 공백으로 구분되어 주어집니다.
#
# 출력 형식
# 합이 최대가 되는 경로에 있는 수의 합을 출력합니다.
#
# 예제 입력 1
# 5
# 7
# 3 8
# 8 1 0
# 2 7 4 4
# 4 5 2 6 5
# 예제 출력 1
# 30

def max_path_sum(n, triangle):
    # dp 배열 초기화
    dp = [[0] * n for _ in range(n)]
    dp[0][0] = triangle[0][0]

    # 모든 위치에서 최대 합 계산
    for i in range(1, n):
        for j in range(i + 1):
            if j == 0:
                dp[i][j] = dp[i-1][j] + ____  # 왼쪽 끝인 경우
            elif j == i:
                dp[i][j] = dp[i-1][j-1] + ____  # 오른쪽 끝인 경우
            else:
                dp[i][j] = max(dp[i-1][j-1], dp[i-1][j]) + ____  # 중간인 경우

    # 마지막 행에서 최대값 반환
    return max(dp[n-1])

# 입력 처리
n = int(input())
triangle = []
for _ in range(n):
    triangle.append(list(map(int, input().split())))

print(max_path_sum(n, triangle))